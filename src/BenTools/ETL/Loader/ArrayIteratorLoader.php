<?php
/**
 * ArrayIteratorLoader.php
 * Generated by PhpStorm - 02/2016
 * Project bentools-etl
 * @author Beno!t POLASZEK
 **/

namespace BenTools\ETL\Loader;

use ArrayIterator;
use BenTools\ETL\Interfaces\ContextInterface;
use BenTools\ETL\Interfaces\LoaderInterface;

class ArrayIteratorLoader implements LoaderInterface {

    /**
     * @var ArrayIterator
     */
    private $arrayIterator;

    /**
     * @var callable
     */
    private $keyFn;

    /**
     * ArrayCollectionLoader constructor.
     * @param ArrayIterator|null $arrayIterator
     * @param callable|null $keyFn
     */
    public function __construct(ArrayIterator $arrayIterator, callable $keyFn = null) {
        $this->arrayIterator = $arrayIterator;
        $this->keyFn         = $keyFn;
    }

    /**
     * @inheritDoc
     */
    public function load($data, ContextInterface $context) {
        if (is_callable($this->keyFn)) {
            $key                       = call_user_func($this->keyFn, $data);
            $this->arrayIterator[$key] = $data;
        }
        else {
            $this->arrayIterator[]     = $data;
        }
    }

    /**
     * @inheritDoc
     */
    public function flush(ContextInterface $context) {
        // Nothing to do here.
    }

    /**
     * @inheritDoc
     */
    public function clear(ContextInterface $context) {
        foreach ($this->arrayIterator AS $key => $value) {
            unset($this->arrayIterator[$key]);
        }

        # Don't know why, but some elements may remain after the 1st foreach loop, and we need another one for the job to get done...
        foreach ($this->arrayIterator AS $key => $value) {
            unset($this->arrayIterator[$key]);
        }
    }

}